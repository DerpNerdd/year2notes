React

How to Start
Creating a react app is a large task that we can use toolchains to do for us
There are a lot of toolchains that serve different purposes but here are the biggest ones
    Create React App
    Next.js 
    Vue 
    Gatsby 
    Parcel 

History of React 
React was first developed by Facebook and released an an open-source project in 2013. Over the years, it has gained widespread adoption in the web development community due to its simplicity, performance, and flexibility. React is maintained by Facebook and a community of developers, and it has gone through several major versions, with React 18 being the latest at the time of this lesson.

Uses of React
React is widely used in web development for creating interactive and dynamic user interfaces. It is particularly suitable for single-page applications (SPAs), but can be used in various contexts, including:
    Websites: React is used to build modern, responsive websites with interactive features 
    Web Applications: Many web applications, such as social media platforms, content management systems, and e-commerce sites, use React for its performance and flexibility. 
    Mobile Apps: React Native, a framework based on Ract, is used for developing cross-platform mobile applications for iOS and Android
    Interactive Dashboards: Reach is well-suited for building data visualization and interactive dashboard applications
    Games: Some web-based games are built using React for their user interfaces 

Intro to .jsx
JSX stands for javascript expressions and runs perfectly fine in a .JS file too
This language allows us to type HTML style code in a JS format
The biggest advantage is allowing us to do calculations or conditional checking alongside the page rendering
When you are creating components or anything that is rendered with the index.js file you can instead of .jsx 
.jsx should only be used with files that are capitalized
You can use JS or JSX but the benefit to JSX is the use of emmet and auto-fill of the HTML elements

The way to use code in JSX is surrounding it in { curly brackets }
This informs the code to treat everything inside of the brackets as regular JS
If you want anything to render then you need to "return" it from the component function
Lastly, just like js, when you return something the code stops

Intro to components
React is written in .jsx, this is a special form of HTML
Components are differentiated from the rest of the html tags by using capitals
Components can be used for anything that you want to partition into small and managable platforms

Creating new components 
When creating components it is best that they are named singular nouns, Book, Header, Item, Button, etc. 
Components should also be kept in a components folder in the .src folder 

Parts of a component
Imports
    Typically useState, useEffect, or other react hooks 
Arrow function
    This is the name of the component and will also hold any props that are passed down 

Any States, functions, variables
    Before the return the react component you can define any js you want to use
The return statement 
    This will house what you want to be rendered into HTML
Export Components
    This just sends off the react components to the dom renderer

Importing Components
Once you have created your components you need to import them on the main app page
You can rename them if you like by using the 'as' keyword

Using Components
When you want to use a component you type it out just like a regular HTML tag but you must use a capital letter
Capital letters let the react library know to compile the code
Lastly remember that you always need to close all of your react components 
<Form /> or <Movies />

UseState 
const [state, setState] = useState(initialState)
useState stores a value and returns it to the user similar to a variable 
setState(newState)
updating using setState causes a re-render of your page

Setting Styles
Lastly, there will be times when you need to use js to pass objects, it ins important to remember that requires a double bracket {{}}
One of the most ocmmon instances of this is css styles and props
style = {{color: blue, fontSize: '40px}}

Introduction to props
Props (short for properties) are any setting or value that is attached to a component
These are most used to pass values down the line but can also be used just like HTML element properties

Props
You can give these props any name and any value
The better you name it the more useful it will be 

<Question
    key = {data.id}
    title = {data.title}
    info = {data.info}
/>

const Question = ({ title, info }) => {}

Destructuring Props
If you have a lot of information you can destructure your props to save you some space:

<Question
    key = {data.id}
    {...data}
/>

const Question = ({ title, info }) => {}

Mapping Arrays
{questions.map((question) => {
    return (
        <Question key={question.key} {...question} />
    );
})}

In this example we have several items in the questions state and we can loop through all of them, returning a <Question/> component for each one 

Using Props
Using Props once they are passed down is as simple as adding the name of the prop to the component parameters
We use { ... } to immediately deconstruct it for use in the component

const List = ({ people, name, id, info }) => {}

Now that we have accepted these props we are able to use them as variables
This is especially important when we are mapping and using the same variables for several different values 